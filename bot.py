import telebot
import json
import os
from collections import defaultdict

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®
BOT_TOKEN = "7526852134:AAGx1RKchBl5GAGVWih7a0E7PmXEo2D0HO8"
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ì ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
STATUS_FILE = "card_status.json"
card_status_cache = {}
generated_cards = defaultdict(list)

# ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ JSON ‡¶≤‡ßã‡¶°/‡¶∏‡ßá‡¶≠ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def load_card_status():
    if os.path.exists(STATUS_FILE):
        with open(STATUS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_card_status():
    with open(STATUS_FILE, "w") as f:
        json.dump(card_status_cache, f, indent=2)

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶≤‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶≤‡ßã‡¶°
card_status_cache = load_card_status()

# ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶°‡ßá‡¶Æ‡ßã ‡¶≤‡¶ú‡¶ø‡¶ï)
def simulate_card_check(card):
    if card in card_status_cache:
        return card_status_cache[card]
    if card[-1] in "13579":
        status = "Live"
    elif card[-1] in "02468":
        status = "Dead"
    else:
        status = "Unknown"
    card_status_cache[card] = status
    save_card_status()
    return status

# /gen ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@bot.message_handler(func=lambda msg: msg.text.startswith(('/gen', '.gen')))
def handle_gen(msg):
    bin_prefix = "515462"
    cards = [f"{bin_prefix}{i:010d}|{(i%12)+1:02d}|202{7 + (i % 4)}|{100 + (i % 900)}" for i in range(10)]
    generated_cards[msg.message_id] = cards
    card_list = "\n".join(f"<code>{card}</code>" for card in cards)
    bot.send_message(msg.chat.id, f"‚úÖ Generated Cards:\n{card_list}")

# /chk ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@bot.message_handler(func=lambda msg: msg.text.startswith(('/chk', '.chk')))
def handle_chk(msg):
    parts = msg.text.split()
    if len(parts) < 2:
        bot.send_message(msg.chat.id, "‚ùå ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /chk 5154620000000001|01|2029|123")
        return
    card = parts[1].strip()
    status = simulate_card_check(card)
    bot.send_message(msg.chat.id, f"üßæ <code>{card}</code>\nStatus: <b>{status}</b>")

# /mas.chk ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@bot.message_handler(commands=['mas.chk'])
def handle_mas_chk(msg):
    if not msg.reply_to_message or msg.reply_to_message.message_id not in generated_cards:
        bot.send_message(msg.chat.id, "‚ùå Reply ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡•§")
        return
    cards = generated_cards[msg.reply_to_message.message_id]
    result_lines = [f"<code>{c}</code> ‚ûú <b>{simulate_card_check(c)}</b>" for c in cards]
    bot.send_message(msg.chat.id, "üìã Bulk Check Results:\n" + "\n".join(result_lines))

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@bot.message_handler(commands=['start'])
def start_cmd(msg):
    bot.send_message(
        msg.chat.id,
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:\n"
        "/gen ‡¶¨‡¶æ .gen ‚Äì ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá\n"
        "/chk [‡¶ï‡¶æ‡¶∞‡ßç‡¶°] ‚Äì ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá\n"
        "/mas.chk ‚Äì ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶ö‡ßá‡¶ï (reply ‡¶ï‡¶∞‡ßá)"
    )

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ
if __name__ == '__main__':
    print("‚úÖ Bot is running...")
    bot.infinity_polling()
